library("imager")
clusterize <- function(file_path) {
# get a kmeans df
# input image file path
# output percent leaf cover first sky, second leaves I think
image <- load.image(file_path)
image <- grayscale(image)
# Note, there is a bug where if the image is already BW, the above line causes a failure
# do the kmeans clustering, looking for 2 clusters. as.vector is needed or else it only does the first row for some reason
km <- kmeans(as.vector(image), centers = 2)
# note km$size returns a two vector - first is sky, second is leaves
num_pixels <- dim(image)[1] * dim(image)[2]
percents <- km$size/num_pixels*100
# note: currently returns in order of higher to lower percent,
# this is a problem if there is more sky in an image than leaves.
# I can deal with this by calculating the average value of the pixel
# values and executing some code to switch the order in that case.
return(percents)
}
# next step is to setup the function to loop through files in folder and make data frames and graphs!!
# I think that is enough work on this for tonight
clusterize(file.choose())
im <- file.choose()
im
clusterize(im)
library(imager)
clusterize(im)
test <- load.image(im)
test <- load.image(im)
test <- load.image(file.choose())
source('~/Documents/canopy-cover/main.R')
library(tcltk)
loopFiles(tk_choose.dir())
loopFiles(tk_choose.dir())
df <- loopFiles(tk_choose.dir())
df2 <- loopFiles(tk_choose.dir())
df
df2
l <- list(df, df2)
makeGraphs(l)
df3 <- loopFiles(tk_choose.dir())
df4 <- loopFiles(tk_choose.dir())
l
l
l <- list(df, df2, df3, df4)
makeGraphs(l)
source('~/Documents/canopy-cover/main.R')
list.files()
library(tcltk)
setwd(tk_choose.dir())
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
ls
list.files()
setwd(tk_choose.dir())
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
script.dir <- tk_choose.dir()
setwd(script.dir)
list.dirs(path = "./photos/")
cat(script.dir + "./photos")
cat(script.dir,"./photos")
cat(script.dir,"/photos")
cat(script.dir,"/photos", sep="")
source('~/Documents/canopy-cover/main.R')
cat(script.dir)
cat(script.dir, "photos", sep="")
source('~/Documents/canopy-cover/main.R')
as.character(cat(script.dir))
script.dir
?setwd
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
setwd(tk_choose.dir())
list.dirs(path = "./photos/")
list.dirs(path = "./photos/", recursive = F)
source('~/Documents/canopy-cover/main.R')
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("cmartin/LAI")
install.packages("rgdal")
devtools::install_github("cmartin/LAI")
devtools::install_github("cmartin/LAI")
devtools::install_github("cmartin/LAI")
library(LAI)
list.files()
test_image <- system.file("extdata", "./edison/Oct_3_noon_Row19and21_58geno/004_1_Oct3_2015_GOPRO002.JPG", package = "LAI")
plotRGB()
plotRGB(
brick(test_image),
asp = 1
)
plot(test_image)
setwd(dir.choose())
setwd(choose.dir())
setwd(choose.dir())
setwd(tk_choose.dir())
library(tcltk)
setwd(tk_choose.dir())
list.files()
test_image <- system.file("extdata", "004_1_Oct3_2015_GOPRO002.JPG", package = "LAI")
plot(test_image)
library(raster)
test_image <- system.file("extdata", "004_1_Oct3_2015_GOPRO002.JPG", package = "LAI")
plotRGB(test_image)
?system.file
system.file("004_1_Oct3_2015_GOPRO002.JPG")
test_image <-  system.file("extdata", "IMG_7595.JPG", package = "LAI")
plotRGB(test_image)
test_image
test_image <- "./004_1_Oct3_2015_GOPRO002.JPG"
plotRGB(test_image)
raster("./004_1_Oct3_2015_GOPRO002.JPG")
raster("./004_1_Oct3_2015_GOPRO002.JPG") -> test_image
plotRGB(test_image)
plotRGB(brick(test_image))
?plotRGB
LAI_from_gf_at_57(test_image)
image <- "./004_1_Oct3_2015_GOPRO002.JPG"
LAI_from_gf_at_57(image)
library(imager)
install.packages("imager")
install.packages("imager")
install.packages("imager")
library(imager)
rm(test_image)
?imager
library(imager)
im <- load.image(image)
plot(im)
im
par(las=1)
plot(0, 0, type="n", xlab="", ylab= "", xlim=c(0,1000), ylim=c(0,1000), asp=1, bty="n")
symbols(2000, 1500, inches = FALSE, circles = 1000, add = TRUE)
symbols(2000, 1500, inches = FALSE, circles = 5000, add = TRUE)
par(las=1)
plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,100), ylim=c(0,100), asp=1, bty="n")
# One circle
symbols(50, 50, inches=FALSE, circles = 40, add=TRUE)
im
str(im)
im.size
dim(im)
dim(im)[1]
par(las=1)
plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,4000), ylim=c(0,3000), asp=1, bty="n")
# One circle
symbols(2000, 1500, inches=FALSE, circles = 1000, add=TRUE)
plot(im, add = TRUE)
warnings()
symbols(2000, 1500, inches=FALSE, circles = 1000, add=TRUE)
symbols(2000, 1500, inches=FALSE, circles = 100, add=TRUE)
LAI_from_gf_at_57(image)
install.packages("YplantQMC")
library(YplantQMC)
installQuasiMC()
