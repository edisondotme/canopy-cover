library("imager")
clusterize <- function(file_path) {
# get a kmeans df
# input image file path
# output percent leaf cover first sky, second leaves I think
image <- load.image(file_path)
image <- grayscale(image)
# Note, there is a bug where if the image is already BW, the above line causes a failure
# do the kmeans clustering, looking for 2 clusters. as.vector is needed or else it only does the first row for some reason
km <- kmeans(as.vector(image), centers = 2)
# note km$size returns a two vector - first is sky, second is leaves
num_pixels <- dim(image)[1] * dim(image)[2]
percents <- km$size/num_pixels*100
# note: currently returns in order of higher to lower percent,
# this is a problem if there is more sky in an image than leaves.
# I can deal with this by calculating the average value of the pixel
# values and executing some code to switch the order in that case.
return(percents)
}
# next step is to setup the function to loop through files in folder and make data frames and graphs!!
# I think that is enough work on this for tonight
clusterize(file.choose())
im <- file.choose()
im
clusterize(im)
library(imager)
clusterize(im)
test <- load.image(im)
test <- load.image(im)
test <- load.image(file.choose())
source('~/Documents/canopy-cover/main.R')
library(tcltk)
loopFiles(tk_choose.dir())
loopFiles(tk_choose.dir())
df <- loopFiles(tk_choose.dir())
df2 <- loopFiles(tk_choose.dir())
df
df2
l <- list(df, df2)
makeGraphs(l)
df3 <- loopFiles(tk_choose.dir())
df4 <- loopFiles(tk_choose.dir())
l
l
l <- list(df, df2, df3, df4)
makeGraphs(l)
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
setwd(~/)
setwd("~/")
setwd(script.dir)
list.dirs(path path = "./photos")
list.dirs(path = "./photos/")
list.dirs()
list.dirs(path = "./photos/")
list.dirs(path = "./photos/", recursive = F)
list.dirs(path = "./photos/", recursive = F) -> dr
dr[1]
loopFiles(dir[1]) -> t
loopFiles(dr[1]) -> t
t
