demo()
demo(recursion)
demo(scoping)
demo(Japanese)
demo(plotmath)
demo(colors)
demo(is.things)
demo(Hershey)
demo(plotmath)
demo(image)
demo(image)
demo(persp)
demo(graphics)
x <- runif(100, 0, 1)
hist(x)
rm(list = ls()
)
runif(13, 0, 1)
runif(n = 122, 32, 222)
runif(n = 122, 32, 222) -> x
hist(bx)
hist(x)
hist(x)
first <- "hello"
second <- "world"
first + second
paste(first, second)
typeof(first)
typeof(x)
# UGIS Intro to R
# Math
1 + 1
# Variables
x <- 1
y <- 535 + x
print(y)
# Data types
first <- "hello"
second <- "world"
first + second # Error
paste(first, second)
typeof(first)
typeof(x)
y <- 53.5 + x
typeof(x)
typeof(y)
typeof(y)
typeof(1)
typeof(int(1))
typeof(as.integer(x))
y
demo()
demo(persp)
demo(image)
demo()
# Plotting
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
curve(expr = sin(x), from = 0, to = 4*pi, col = 'blue')
curve(expr = cos(x), from = 0, to = 4*pi, col = 'red', add = TRUE)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
demo(persp)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
hist(x = y, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
x
demo(persp)
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
curve(expr = sin(x), from = 0, to = 4*pi, col = 'blue')
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
# UGIS Intro to R
# Math
1 + 1
# Variables
x <- 1
y <- 53.5 + x
print(y)
# Data types
first <- "hello"
second <- "world"
first + second # Error
paste(first, second)
typeof(first)
typeof(y)
# Some demos
demo()
demo(image)
demo(persp)
# Plotting
# Natural log plot
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
# Some waves
curve(expr = sin(x), from = 0, to = 4*pi, col = 'blue')
curve(expr = cos(x), from = 0, to = 4*pi, col = 'red', add = TRUE)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
x <- runif(n = 100, min = 0, max = 10)
y <- runif(n = 100, min = 0, max = 10)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
TRUE == T
FALSE
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5)
v
l <- list("hello", 1)
l
l <- list("hello", 1, FALSE)
l
length(v)
letters()
LETTERS
letters
len(letters)
length(letters)
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5, 6, 0, 0, 1, 6, 7, 6)
v
length(x = v)
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5, 6, 0, 0, 1, 6, 7, 6, 53, 37, 75)
v
length(x = v)
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5, 6, 0, 0, 1, 6, 7, 6, 53, 37, 75, 1715, 75735, 753, 35, 3)
v
length(x = v)
data.frame(v, letters, LETTERS)
typeof(letters)
df = data.frame(v, letters, LETTERS)
df
typeof(df)
typeof(df)
df
class(df)
mode(df)
class(df)
type(df)
typeof(df)
typeof(x)
df = data.frame(v, letters, runif(n = 26, min = 0, max = 1), LETTERS)
df
?data.frame
colnames(df) <- c(v, small, random, caps)
colnames(df) <- c('v', 'small', 'random', 'caps')
df
colnames(df) <- c('v', 'lowercase', 'random', 'caps')
df
df = data.frame(v, letters, runif(n = 26, min = 0, max = 1), LETTERS, stringsAsFactors = F)
# Assign column names
colnames(df) <- c('v', 'lowercase', 'random', 'caps')
df
capitals <- df$caps
head(df)
head(capitals)
df['caps', 'lowercase']
df[c('caps', 'lowercase')]
df[1:]
df[1]
df[1,:]
df[:1]
df[1,:]
df[1,]
df[,1]
df[1,1]
df[,1]    # First column vector
df[1,]    # First row as list
df[1, 1]  # Value from first column and row
subset(x = df, random < .5)
t <- volcano
volcano
head(volcano)
rm(t)
t <- AirPassengers
head(t)
rm(t)
head(women)
summary(women)
summary(object = women)
head(women)
length(x = women)
length(x = women$height)
summary(object = women)
str(women)
str(oats)
str(oats)
t <- oats
oats
str(Aids2)
str(volcano)
str(uspop)
str(BJsales)
head(phones)
BOD
HairEyeColor
str(HairEyeColor)
head(HairEyeColor)
InsectSprays
Titanic
head(Titanic)
str(Titanic)
head(precip)
precip
rivers
pressure
sunspots
head(sunspots)
str(sunspots)
fir
lh
cars
head(cars)
morley
head(morely)
head(morley)
head(iris)
hist(iris)
head(iris[,1:4])
hist(iris[,1:4])
plot(iris[,1:4])
plot(iris)
str(iris)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width, main="Edgar Anderson's Iris Data")
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")
[unclass(iris$Species)]
)
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
str(iris)
head(iris)
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
install.packages("imager")
library("imager")
install.packages("imager")
library("imager")
library("imager")
install.packages("imager")
install.packages("imager")
install.packages("imager")
install.packages("imager")
install.packages("imager")
source('~/Downloads/ugis_shiny/app.R')
library(shiny)
runApp('Downloads/ugis_shiny')
runApp('Downloads/ugis_shiny')
runApp('Downloads/ugis_shiny')
runApp('Downloads/ugis_shiny')
runApp('Documents/dev/FlowingData/How to map geo paths in R/geo-paths/shiny_app')
runApp('Downloads/ugis_shiny')
38 + 69
runApp('Downloads/ugis_shiny')
runApp('Downloads/ugis_shiny')
for(folder in list.dirs(recursive = F)) {
ls()
source('~/media/Documents/UIUC/2016/ESE 389/Final Project/main.R')
loopFiles(dir.choose())
dir.choose()
choose.dir()
choosedir()
dirchoose()
source('~/media/Documents/UIUC/2016/ESE 389/Final Project/main.R')
choose.dir()
choose.dir
R.Version()
choose.dir()
library(tcltk)
tk_choose.dir()
pd <- "/home/edison/media/Documents/UIUC/2016/ESE 389/Final Project/photos/Arenal National Park - Mar 23/"
df <- loopFiles(pd)
df
t <- list(df)
t
t[1]
t[2]
df2 <- loopFiles(tk_choose.dir())
df2
t[2] <- df2
t
t <- list(df, df2)
t
df3 <- loopFiles(tk_choose.dir())
df4 <- loopFiles(tk_choose.dir())
t<- list(df, df2, df3, df4)
t
for(el in t) {}
for(el in t) {
print(el)
}
df
deparse(substitute(df))
makeGraphs <- function(dfList) {
# function that takes list of dataframes, runs the analysis and then makes the graphs
for(df in dfList) {
print(deparse(substitute(df)))
}
}
makeGraphs(t)
?substitute
substitute(df)
makeGraphs <- function(dfList) {
# function that takes list of dataframes, runs the analysis and then makes the graphs
for(df in dfList) {
print(substitute(df))
}
}
makeGraphs(t)
makeGraphs <- function(dfList) {
# function that takes list of dataframes, runs the analysis and then makes the graphs
for(df in dfList) {
print(deparse(df))
}
}
makeGraphs(t)
makeGraphs <- function(dfList) {
# function that takes list of dataframes, runs the analysis and then makes the graphs
for(df in dfList) {
print(deparse(substitute(df)))
}
}
makeGraphs(t)
names(df)
lst(df)
df
plot(main = 'hello')
plot(1, main='test')
attach(test)
?attach
getwd()
setwd(tk_choose.dir())
getwd()
pdf("test.pdf")
plot(1, main = "test1")
plot(66, main ='test2')
dev.off()
v <- c()
v[1] <- 'hello'
v
v[2] <- 'world'
v
?append
makeGraphs <- function(dfList) {
# function that takes list of dataframes, runs the analysis and then makes the graphs
avgs <- c()
# start pdf
pdf("outplots.pdf")
# I should be using lapply here, but oh well
for(df in dfList) {
#print(deparse(substitute(df)))
avgs <- append(avgs, mean(df$leaf))
barplot(df$leaf, main = "Average leaf cover", xlab = "Image instance", ylab = "Percent leaf cover", col = "springgreen4")
}
barplot(avgs, col = 'springgreen4', main = 'Percent Canopy Cover in Costa Rica Forests', names.arg = c('Arenal', 'Braulio', 'Cahuita', 'Cloud Forest'), ylab = '"Average" percent leaf cover')
}
makeGraphs <- function(dfList) {
# function that takes list of dataframes, runs the analysis and then makes the graphs
avgs <- c()
# start pdf
pdf("outplots.pdf")
# I should be using lapply here, but oh well
for(df in dfList) {
#print(deparse(substitute(df)))
avgs <- append(avgs, mean(df$leaf))
barplot(df$leaf, main = "Average leaf cover", xlab = "Image instance", ylab = "Percent leaf cover", col = "springgreen4")
}
barplot(avgs, col = 'springgreen4', main = 'Percent Canopy Cover in Costa Rica Forests', names.arg = c('Arenal', 'Braulio', 'Cahuita', 'Cloud Forest'), ylab = '"Average" percent leaf cover')
dev.off()
}
makeGraphs(t)
