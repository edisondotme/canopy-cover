library("imager")
clusterize <- function(file_path) {
# get a kmeans df
# input image file path
# output percent leaf cover first sky, second leaves I think
image <- load.image(file_path)
image <- grayscale(image)
# Note, there is a bug where if the image is already BW, the above line causes a failure
# do the kmeans clustering, looking for 2 clusters. as.vector is needed or else it only does the first row for some reason
km <- kmeans(as.vector(image), centers = 2)
# note km$size returns a two vector - first is sky, second is leaves
num_pixels <- dim(image)[1] * dim(image)[2]
percents <- km$size/num_pixels*100
# note: currently returns in order of higher to lower percent,
# this is a problem if there is more sky in an image than leaves.
# I can deal with this by calculating the average value of the pixel
# values and executing some code to switch the order in that case.
return(percents)
}
# next step is to setup the function to loop through files in folder and make data frames and graphs!!
# I think that is enough work on this for tonight
clusterize(file.choose())
im <- file.choose()
im
clusterize(im)
library(imager)
clusterize(im)
test <- load.image(im)
test <- load.image(im)
test <- load.image(file.choose())
source('~/Documents/canopy-cover/main.R')
library(tcltk)
loopFiles(tk_choose.dir())
loopFiles(tk_choose.dir())
df <- loopFiles(tk_choose.dir())
df2 <- loopFiles(tk_choose.dir())
df
df2
l <- list(df, df2)
makeGraphs(l)
df3 <- loopFiles(tk_choose.dir())
df4 <- loopFiles(tk_choose.dir())
l
l
l <- list(df, df2, df3, df4)
makeGraphs(l)
source('~/Documents/canopy-cover/main.R')
list.files()
library(tcltk)
setwd(tk_choose.dir())
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
ls
list.files()
setwd(tk_choose.dir())
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
script.dir <- tk_choose.dir()
setwd(script.dir)
list.dirs(path = "./photos/")
cat(script.dir + "./photos")
cat(script.dir,"./photos")
cat(script.dir,"/photos")
cat(script.dir,"/photos", sep="")
source('~/Documents/canopy-cover/main.R')
cat(script.dir)
cat(script.dir, "photos", sep="")
source('~/Documents/canopy-cover/main.R')
as.character(cat(script.dir))
script.dir
?setwd
source('~/Documents/canopy-cover/main.R')
source('~/Documents/canopy-cover/main.R')
setwd(tk_choose.dir())
list.dirs(path = "./photos/")
list.dirs(path = "./photos/", recursive = F)
source('~/Documents/canopy-cover/main.R')
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("cmartin/LAI")
install.packages("rgdal")
devtools::install_github("cmartin/LAI")
devtools::install_github("cmartin/LAI")
devtools::install_github("cmartin/LAI")
library(LAI)
list.files()
test_image <- system.file("extdata", "./edison/Oct_3_noon_Row19and21_58geno/004_1_Oct3_2015_GOPRO002.JPG", package = "LAI")
plotRGB()
plotRGB(
brick(test_image),
asp = 1
)
plot(test_image)
setwd(dir.choose())
setwd(choose.dir())
setwd(choose.dir())
setwd(tk_choose.dir())
library(tcltk)
setwd(tk_choose.dir())
list.files()
test_image <- system.file("extdata", "004_1_Oct3_2015_GOPRO002.JPG", package = "LAI")
plot(test_image)
library(raster)
test_image <- system.file("extdata", "004_1_Oct3_2015_GOPRO002.JPG", package = "LAI")
plotRGB(test_image)
?system.file
system.file("004_1_Oct3_2015_GOPRO002.JPG")
test_image <-  system.file("extdata", "IMG_7595.JPG", package = "LAI")
plotRGB(test_image)
test_image
test_image <- "./004_1_Oct3_2015_GOPRO002.JPG"
plotRGB(test_image)
raster("./004_1_Oct3_2015_GOPRO002.JPG")
raster("./004_1_Oct3_2015_GOPRO002.JPG") -> test_image
plotRGB(test_image)
plotRGB(brick(test_image))
?plotRGB
LAI_from_gf_at_57(test_image)
image <- "./004_1_Oct3_2015_GOPRO002.JPG"
LAI_from_gf_at_57(image)
library(imager)
install.packages("imager")
install.packages("imager")
install.packages("imager")
library(imager)
rm(test_image)
?imager
library(imager)
im <- load.image(image)
plot(im)
im
par(las=1)
plot(0, 0, type="n", xlab="", ylab= "", xlim=c(0,1000), ylim=c(0,1000), asp=1, bty="n")
symbols(2000, 1500, inches = FALSE, circles = 1000, add = TRUE)
symbols(2000, 1500, inches = FALSE, circles = 5000, add = TRUE)
par(las=1)
plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,100), ylim=c(0,100), asp=1, bty="n")
# One circle
symbols(50, 50, inches=FALSE, circles = 40, add=TRUE)
im
str(im)
im.size
dim(im)
dim(im)[1]
par(las=1)
plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,4000), ylim=c(0,3000), asp=1, bty="n")
# One circle
symbols(2000, 1500, inches=FALSE, circles = 1000, add=TRUE)
plot(im, add = TRUE)
warnings()
symbols(2000, 1500, inches=FALSE, circles = 1000, add=TRUE)
symbols(2000, 1500, inches=FALSE, circles = 100, add=TRUE)
LAI_from_gf_at_57(image)
install.packages("YplantQMC")
library(YplantQMC)
installQuasiMC()
symbols(2000, 1500, inches=FALSE, circles = 1000, add=TRUE)
library(raster)
library(imager)
setwd(tk_choose.dir())
library(tcltk)
setwd(tk_choose.dir())
im <- load.image(image)
image <- "./004_1_Oct3_2015_GOPRO002.JPG"
im <- load.image(image)
# Blank plot
#par(las=1)
#plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,4000), ylim=c(0,3000), asp=1, bty="n")
# One circle
plot(im)
symbols(2000, 1500, inches=FALSE, circles = 1000, add=TRUE)
library(LAI)
LAI_from_gf_at_57(image_path = image)
data(RMelevation)
install.packages("image2lz")
install.packages("fields")
library(image2lz)
library(fields)
image2lz()
?image2lz
x1p<- c(
-106.2017, -104.2418, -102.9182, -102.8163, -102.8927, -103.3254, -104.7763,
-106.5581, -108.2889, -109.1035, -109.3325, -108.7980)
x2p<- c(
43.02978, 42.80732, 41.89727, 40.84566, 39.81427, 38.17618, 36.53810, 36.29542,
36.90211, 38.29752, 39.45025, 41.02767)
xp <- cbind(x1p, x2p)
xp
polygon(xp[,1], xp[,2], lwd=2)
make.surface.grid()
?make.surface.grid
rm(x1p, x2p)
?image2lz
?crop.image
plot(im)
ims <- resize(im, round(width(im)/10), round(height(im)/10))
plot(ims)
ims
depth(ims)
ims
depth(ims)
spectrum(ims)
noise <- array(runif(5*5*5*3),c(5,5,5,3)) #5x5 pixels, 5 frames, 3 colours. All noise
noise
noise <- as.cimg(noise)
noise
dim(noise)
head(as.data.frame(noise))
plot(noise[,,1])
plot(noise[1,,])
plot(noise)
plot(ms)
plot(ims)
rm(im)
df <- as.data.frame(ims)
head(df)
head(x = df, 33)
tail(df)
str(df)
?in.poly
?symbols
?polygon
?symbols
circle <- symbols(10, 10, inches=F, circles = 100)
circle <- symbols(10, 10, inches=F, circles = 100, add=TRUE)
circle <- symbols(10, 10, inches=F, circles = 13, add=TRUE)
circle <- symbols(10, 10, inches=F, circles = 13, add=TRUE)
plot.new()
circle <- symbols(10, 10, inches=F, circles = 13, add=TRUE)
plot.default()
plot(0, 0, xlim = c(0,100), ylim = c(0, 100))
circle <- symbols(10, 10, inches=F, circles = 100, add=TRUE)
circle <- symbols(10*5, 10*5, inches=F, circles = 10, add=TRUE)
circle
polygon(circle)
circle <- symbols(10*5, 10*5, inches=F, circles = 10, add=F)
circle <- symbols(10*5, 10*5, inches=F, circles = 15, add=F)
circle <- symbols(10*5, 10*5, inches=F, circles = 15*3, add=F)
circle <- symbols(10*5, 10*5, inches=F, circles = 15, add=F)
circle <- symbols(10*5, 10*5, inches=F, circles = 15, add=T)
circle <- symbols(10*5, 10*5, inches=F, circles = 17, add=T)
circle <- symbols(10*5, 10*5, inches=F, circles = 100, add=T)
circle <- symbols(10*5, 10*5, inches=F, circles = 20, add=T)
library(tcltk)
library(raster)
library(imager)
dir <- tk_choose.dir()
setwd(dir)
image <- "./004_1_Oct3_2015_GOPRO002.JPG"
im <- load.image(image)
ims <- resize(im, round(width(im)/10), round(height(im)/10))
rm(im)
# make a df
df <- as.data.frame(ims)
# working with circles
# Blank plot
#par(las=1)
#plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,4000), ylim=c(0,3000), asp=1, bty="n")
library(LAI)
LAI_from_gf_at_57(image_path = image, camera_horiz_FOV = 90, focal_angle = 90) -> output
LAI_from_gf_at_57(image_path = image, camera_horiz_FOV = 73, focal_angle = 90) -> output
LAI_from_gf_at_57(image_path = image, camera_horiz_FOV = 73.7, focal_angle = 90) -> output
LAI_from_gf_at_57(image_path = image, camera_horiz_FOV = 73.7, focal_angle = 45) -> output
LAI_from_gf_at_57(image_path = image, camera_horiz_FOV = 73.7, focal_angle = 75) -> output
test_image <- system.file("extdata", "IMG_7595.JPG", package = "LAI")
test_image
plotRGB(brick(test_image), asp = 1)
LAI_from_gf_at_57(test_image)
LAI_from_gf_at_57(image_path = test_image, camera_horiz_FOV = 10, focal_angle = 40)
LAI_from_gf_at_57(image_path = test_image, camera_horiz_FOV = 57, focal_angle = 40)
dir
rst <- raster::raster(x = image, band = 3)  # only blue band is necessary for some reason
rst
crop_around_angle_t <- function(
img, # raster object
camera_horiz_FOV, # degrees - 73.7
focal_angle, # degrees angle at which the camera was pointing (degrees) - 45
# crop box
crop_top_angle = (90 - 57.5) + 5, # our angles are calculated from the ground
crop_bottom_angle = (90 - 57.5) - 5 # ten degree range
) {
# pixel/degree ratio
pixel_degree_ratio <- img@nrows / camera_horiz_FOV
# at what angle is the picture bottom pointing to
bottom_angle <- focal_angle - camera_horiz_FOV / 2
crop_top_pixel <- (crop_top_angle - bottom_angle) * pixel_degree_ratio
crop_bottom_pixel <- (crop_bottom_angle - bottom_angle) * pixel_degree_ratio
if ((crop_top_pixel < 0) | (crop_bottom_pixel < 0)) {
stop("Image does not include the 57 degrees band")
}
e <- raster::extent(c(0,img@ncols,crop_bottom_pixel,crop_top_pixel) )
return(raster::crop(img,e))
}
tout <- crop_around_angle_t(img = rst, camera_horiz_FOV = 73, focal_angle = 45)
tout
plot(tout)
rst <- raster::raster(x = system.file("extdata", "IMG_7595.JPG", package = "LAI"), band = 3)  # only blue band is necessary for some reason
tout <- crop_around_angle_t(img = rst, camera_horiz_FOV = 73, focal_angle = 45)
plotRGB(tout)
plotRGB(brick(tout))
plotRGB(rst)
plotRGB(brick(rst))
rst@nrows
rst@nrows/73
(90 - 57.5) + 5
(90 - 57.5) - 5
rst
?`extent,BasicRaster-method`
