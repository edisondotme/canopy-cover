demo()
demo(recursion)
demo(scoping)
demo(Japanese)
demo(plotmath)
demo(colors)
demo(is.things)
demo(Hershey)
demo(plotmath)
demo(image)
demo(image)
demo(persp)
demo(graphics)
x <- runif(100, 0, 1)
hist(x)
rm(list = ls()
)
runif(13, 0, 1)
runif(n = 122, 32, 222)
runif(n = 122, 32, 222) -> x
hist(bx)
hist(x)
hist(x)
first <- "hello"
second <- "world"
first + second
paste(first, second)
typeof(first)
typeof(x)
# UGIS Intro to R
# Math
1 + 1
# Variables
x <- 1
y <- 535 + x
print(y)
# Data types
first <- "hello"
second <- "world"
first + second # Error
paste(first, second)
typeof(first)
typeof(x)
y <- 53.5 + x
typeof(x)
typeof(y)
typeof(y)
typeof(1)
typeof(int(1))
typeof(as.integer(x))
y
demo()
demo(persp)
demo(image)
demo()
# Plotting
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
curve(expr = sin(x), from = 0, to = 4*pi, col = 'blue')
curve(expr = cos(x), from = 0, to = 4*pi, col = 'red', add = TRUE)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
demo(persp)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
hist(x = y, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
x
demo(persp)
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
curve(expr = sin(x), from = 0, to = 4*pi, col = 'blue')
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
# UGIS Intro to R
# Math
1 + 1
# Variables
x <- 1
y <- 53.5 + x
print(y)
# Data types
first <- "hello"
second <- "world"
first + second # Error
paste(first, second)
typeof(first)
typeof(y)
# Some demos
demo()
demo(image)
demo(persp)
# Plotting
# Natural log plot
curve(expr = exp(x = x), from = 0, to = 12, main = 'Natural Logarithm')
# Some waves
curve(expr = sin(x), from = 0, to = 4*pi, col = 'blue')
curve(expr = cos(x), from = 0, to = 4*pi, col = 'red', add = TRUE)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
x <- runif(n = 100, min = 0, max = 10)
y <- runif(n = 100, min = 0, max = 10)
hist(x = x, freq = FALSE, col = 'lightblue', border = 'white', main = "Culture Ages in Days", xlab = "Days", ylab = 'Frequency of Observation', labels = TRUE)
TRUE == T
FALSE
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5)
v
l <- list("hello", 1)
l
l <- list("hello", 1, FALSE)
l
length(v)
letters()
LETTERS
letters
len(letters)
length(letters)
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5, 6, 0, 0, 1, 6, 7, 6)
v
length(x = v)
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5, 6, 0, 0, 1, 6, 7, 6, 53, 37, 75)
v
length(x = v)
v <- c(1, 3, 6, 1, 6, 9, 1, 2, 4, 7, 5, 6, 0, 0, 1, 6, 7, 6, 53, 37, 75, 1715, 75735, 753, 35, 3)
v
length(x = v)
data.frame(v, letters, LETTERS)
typeof(letters)
df = data.frame(v, letters, LETTERS)
df
typeof(df)
typeof(df)
df
class(df)
mode(df)
class(df)
type(df)
typeof(df)
typeof(x)
df = data.frame(v, letters, runif(n = 26, min = 0, max = 1), LETTERS)
df
?data.frame
colnames(df) <- c(v, small, random, caps)
colnames(df) <- c('v', 'small', 'random', 'caps')
df
colnames(df) <- c('v', 'lowercase', 'random', 'caps')
df
df = data.frame(v, letters, runif(n = 26, min = 0, max = 1), LETTERS, stringsAsFactors = F)
# Assign column names
colnames(df) <- c('v', 'lowercase', 'random', 'caps')
df
capitals <- df$caps
head(df)
head(capitals)
df['caps', 'lowercase']
df[c('caps', 'lowercase')]
df[1:]
df[1]
df[1,:]
df[:1]
df[1,:]
df[1,]
df[,1]
df[1,1]
df[,1]    # First column vector
df[1,]    # First row as list
df[1, 1]  # Value from first column and row
subset(x = df, random < .5)
t <- volcano
volcano
head(volcano)
rm(t)
t <- AirPassengers
head(t)
rm(t)
head(women)
summary(women)
summary(object = women)
head(women)
length(x = women)
length(x = women$height)
summary(object = women)
str(women)
str(oats)
str(oats)
t <- oats
oats
str(Aids2)
str(volcano)
str(uspop)
str(BJsales)
head(phones)
BOD
HairEyeColor
str(HairEyeColor)
head(HairEyeColor)
InsectSprays
Titanic
head(Titanic)
str(Titanic)
head(precip)
precip
rivers
pressure
sunspots
head(sunspots)
str(sunspots)
fir
lh
cars
head(cars)
morley
head(morely)
head(morley)
head(iris)
hist(iris)
head(iris[,1:4])
hist(iris[,1:4])
plot(iris[,1:4])
plot(iris)
str(iris)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width, main="Edgar Anderson's Iris Data")
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")
[unclass(iris$Species)]
)
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
str(iris)
head(iris)
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
install.packages("imager")
library("imager")
install.packages("imager")
library("imager")
library("imager")
install.packages("imager")
install.packages("imager")
install.packages("imager")
install.packages("imager")
install.packages("imager")
install.packages("foreach")
library("foreach")
# Analysis and Hemispherical
# Photography
library("imager")
setwd(dir = "media/Documents/UIUC/2016/ESE 389/Final Project/")
# load parallel library
library("foreach")
file = "./test.JPG"
im <- load.image(file)
# show image
#We call imager::save.image to avoid ambiguity, as base R already has a save.image function
# displaying images
# display(im = )
# This is faster and loads externally in a big viewer
# "dimension" of images
dim(im) # 4000 3000    1    3
# x pixels wide, y pixels tall, 1 frame of video, 3 dimensions for color (RGB)
# Also note: coordinates start at top left (1, 1)
# +x is to the right +y is down
# Turn image grayscale
# This will be useful since color doesn't really matter here.
# Err, actually maybe it does. I'll think about it
# Interesting thought: leaves tend to get brighter the higher up they are. Perhaps I could translate
# the shade of green to determine height. That is too much work for this project, but something
# interesting to think about
gray.im <- grayscale(im)
imdg <- as.data.frame(gray.im)
str(imdg)
head(imdg, 12)
t <- head(imdg, 1000)
t <- head(imdg, 1000)
head(t)
np <- for (pixel in t$value) {
if(value > dark) {
t$leaf = TRUE
} else {
t$leaf = FALSE
}
}
np <- for (pixel in t$value) {
cut <- .12
if(pixel < cut) {
t$leaf = TRUE
} else {
t$leaf = FALSE
}
}
head(np)
for (row in t) {}
for (row in t) {
print(row$value)
}
for (row in t) {
print(row)
}
head(t)
summary(t)
np <- for (pixel in t$value) {
cut <- .09
if(pixel < cut) {
t$leaf = TRUE
} else {
t$leaf = FALSE
}
}
head(t)
summary(object = t)
np <- for (pixel in t) {
cut <- .09
if(pixel$value < cut) {
t$leaf = TRUE
} else {
t$leaf = FALSE
}
}
for(pixel in t){
print(pixel)
}
